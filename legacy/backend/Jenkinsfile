pipeline {

    agent any

    environment {
        GHCR_TOKEN = credentials('GHCR_TOKEN')
        DISCORD_WEBHOOK = credentials('DISCORD_WEBHOOK')
        CODECOV_TOKEN = credentials('CODECOV_TOKEN')
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds(abortPrevious: true)
        buildDiscarder logRotator( 
                    daysToKeepStr: '10', 
                    numToKeepStr: '10'
                )
    }

    tools {
        nodejs 'nodejs'
    }

    stages {
        stage("Install Dependencies") {
            steps {
                dir("bdlist-backend/") {
                    echo "Installing dependencies..."
                    sh "pnpm i"
                }
            }
        }
        stage("CodeCov") {
            steps {
                dir("bdlist-backend/") {
                    sh 'CODECOV_TOKEN=$CODECOV_TOKEN codecov'
                }
            }
        }

        stage ("Transpile TypeScript to JavaScript") {
            steps {
                dir("bdlist-backend/") {
                    echo "Transpiling TypeScript to JavaScript..."
                    sh "pnpm build"
                }
            }
        }

        stage ("Multi-platform Dockerize API and push to ghcr.io") {
            when { branch 'main' }
            steps {
                dir("bdlist-backend/") {
                    script {
                        RESULT = sh(script: "bash dockerize.sh $GHCR_TOKEN", returnStdout: true).trim()
                    }
                }
            }
        }

        stage ("Trigger K8s manifest update") {
            when { allOf { branch 'main'; expression { RESULT == "CHANGED" } } }
            steps {
                dir("bdlist-backend/") {
                    echo "Triggering Update Manifest pipeline"
                    build job: 'shuttleday-update-k8s-manifest', parameters: [string(name: 'DOCKERTAG', value: TAG)]
                } 
            }
        }
    }

    post {
        always {
            discordSend description: "Jenkins Pipeline Build", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: DISCORD_WEBHOOK
        }
    }
}