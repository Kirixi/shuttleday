pipeline {

    agent any

    environment {
        GHCR_TOKEN = credentials('GHCR_TOKEN')
        DISCORD_WEBHOOK = credentials('DISCORD_WEBHOOK')
        CODECOV_TOKEN = credentials('CODECOV_TOKEN')
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds(abortPrevious: true)
        buildDiscarder logRotator( 
                    daysToKeepStr: '10', 
                    numToKeepStr: '10'
                )
        preserveStashes(buildCount: 1)
    }

    tools {
        nodejs 'nodejs'
    }

    stages {
        stage("Install Dependencies") {
            steps {
                dir("bdlist-backend/") {
                    echo "Installing dependencies..."
                    sh "pnpm i"
                }
            }
        }
        stage("CodeCov") {
            steps {
                dir("bdlist-backend/") {
                    sh 'CODECOV_TOKEN=$CODECOV_TOKEN codecov'
                }
            }
        }

        stage ("Transpile TypeScript to JavaScript") {
            steps {
                dir("bdlist-backend/") {
                    echo "Transpiling TypeScript to JavaScript..."
                    sh "pnpm build"
                }
            }
        }

        stage ("Stash Current Version") {
            steps {
                dir("bdlist-backend/") {
                    sh "VERSION=$(cat src/version.json | jq -r .version)"
                    sh "echo $VERSION > version.txt"
                    stash name: 'version', includes: 'version.txt'
                }
            }
        }

        stage ("Compare Versions") {
            steps {
                unstash 'version'
                sh "PREVIOUS_VERSION=$(cat version.txt)"
                sh "CURRENT_VERSION=$(cat src/version.json | jq -r .version)"
                sh "if [ \"$PREVIOUS_VERSION\" = \"$CURRENT_VERSION\" ]; then echo \"Versions match\"; else echo \"Versions do not match\"; fi"
                script {
                    env.VERSIONS_MATCH = (PREVIOUS_VERSION == CURRENT_VERSION) ? "true" : "false"
                }
            }
        }

        stage ("Multi-platform Dockerize API and push to ghcr.io") {
            // This stage only runs when:
            // - the branch is main
            // - the desired tag in version.json is NOT the same as the desired tag in the previous run
            when { allOf { branch 'main'; expression { env.VERSIONS_MATCH == "false" }}}
            steps {
                dir("bdlist-backend/") {
                    sh 'docker login ghcr.io -u PScoriae -p $GHCR_TOKEN'
                    sh "docker buildx build --push --platform linux/amd64,linux/arm64 --builder=build-container -t ghcr.io/shuttleday/api:$CURRENT_VERSION -t ghcr.io/shuttleday/api . "
                }
            }
        }

        stage ("Trigger K8s manifest update") {
            when { branch 'main'}
            steps {
                dir("bdlist-backend/") {
                    echo "Triggering Update Manifest pipeline"
                    build job: 'shuttleday-update-k8s-manifest', parameters: [string(name: 'DOCKERTAG', value: TAG)]
                } 
            }
        }
    }

    post {
        always {
            discordSend description: "Jenkins Pipeline Build", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: DISCORD_WEBHOOK
        }
    }
}