name: Backend CI

on:
  workflow_dispatch:
  push:
    paths: [ 'bdlist-backend/**' ]
    branches: [ 'main' ]
  pull_request:
    paths: [ 'bdlist-backend/**' ]
    branches: [ 'main' ]

defaults:
  run:
    working-directory: ./bdlist-backend

jobs:
  transpile:
    name: Transpile TypeScript to JavaScript
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Transpile TypeScript to JavaScript
        run: pnpm build

      - name: Upload Transpiled Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: transpiled-api
          path: ./bdlist-backend/dist/
          retention-days: 14

  semantic-release:
    # Run only if the branch that triggered the workflow is main
    if: github.ref_name == 'main'
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    name: Semantic Release
    needs: transpile
    uses: ./.github/workflows/semantic-release.yml
  
  get-new-git-tag:
    name: Get New Git Tag
    needs: semantic-release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get-tag.outputs.git_tag }}

    steps:
      - uses: actions/checkout@v3
      # fetches commits pushed by previous job
      # https://github.com/actions/checkout/issues/439#issuecomment-779010780
      - run: git pull origin main 
      # ensures that the checkout is unshallow and has tags for git describe
      # https://github.com/actions/checkout/issues/206#issuecomment-607496604 
      - run: git fetch --prune --unshallow --tags 
      - name: Get current Git tag
        id: get-tag
        run: |
          echo "git_tag=$(git describe --tags HEAD)" >> "$GITHUB_OUTPUT"

  dockerize:
    name: Dockerize and Push Image
    needs: get-new-git-tag
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Download transpiled artifacts
        uses: actions/download-artifact@v3
        with:
          name: transpiled-api
          path: "bdlist-backend/dist/"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/api
          flavor: |
            latest=true
          tags: |
            type=semver,pattern={{version}},value=${{ needs.get-new-git-tag.outputs.tag }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.get-new-git-tag.outputs.tag }}
            type=semver,pattern={{major}},value=${{ needs.get-new-git-tag.outputs.tag }}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: bdlist-backend
          file: bdlist-backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          github-token: $${{ github.token }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}

      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}

  deploy:
    name: Trigger workflow in K8s repository
    needs: [dockerize, get-new-git-tag]
    runs-on: ubuntu-latest
    steps:
      # Gets the current tag and removes the prepended 'v'
      - run: echo "GIT_TAG="${${{ needs.get-new-git-tag.outputs.tag }}#v}" " >> "$GITHUB_ENV"

      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'shuttleday',
              repo: 'k8s',
              workflow_id: 'update-manifest.yml',
              ref: 'main',
              inputs: { 'tag': '${{ env.GIT_TAG }}' }
            })
