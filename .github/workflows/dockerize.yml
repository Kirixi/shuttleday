name: Dockerize Workflow

on:
  workflow_call:
    inputs:
      git-tag:
        description: Git tag for the Docker image
        required: true
        type: string
      working-directory:
        description: Working directory for the project 
        required: true
        type: string
      artifact-name:
        description: Name of the artifact for the Dockerfile to user.email
        required: true
        type: string
      artifact-download-path:
        description: Path for where to put the artifact
        required: true
        type: string
      image-name:
        description: Name of the image
        required: true
        type: string
      
jobs:
  dockerize-app:
    name: Dockerize and Push Frontend Image
    needs: get-new-git-tag
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - uses: actions/checkout@v3
      - name: Download transpiled artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.artifact-download-path }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ inputs.image-name }}
          flavor: |
            latest=true
          tags: |
            type=semver,pattern={{version}},value=${{ inputs.git-tag }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.git-tag }}
            type=semver,pattern={{major}},value=${{ inputs.git-tag }}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.working-directory }}
          file: ${{ inputs.working-directory }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          github-token: $${{ github.token }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}

      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
